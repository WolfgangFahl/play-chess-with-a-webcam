#!/bin/bash
# WF 2019-07-27
# install pre requisites

#ansi colors
#http://www.csc.uvic.ca/~sae/seng265/fall04/tips/s265s047-tips/bash-using-colors.html
blue='\033[0;34m'
red='\033[0;31m'
green='\033[0;32m' # '\e[1;32m' is too bright for white bg.
endColor='\033[0m'

#
# a colored message
#   params:
#     1: l_color - the color of the message
#     2: l_msg - the message to display
#
color_msg() {
  local l_color="$1"
  local l_msg="$2"
  echo -e "${l_color}$l_msg${endColor}"
}

# error
#
#   show an error message and exit
#
#   params:
#     1: l_msg - the message to display
error() {
  local l_msg="$1"
  # use ansi red for error
  color_msg $red "Error: $l_msg" 1>&2
  exit 1
}

#
# show the usage
#
usage() {
  echo "usage: $0 [-h]"
  echo "  -h: show this usage"
  exit 1
}

#
# autoinstall
#
#  check that l_prog is available by calling which
#  if not available install from given package depending on Operating system
#
#  params:
#    1: l_prog: The program that shall be checked
#    2: l_linuxpackage: The apt-package to install from
#    3: l_macospackage: The MacPorts package to install from
#
autoinstall() {
  local l_prog=$1
  local l_linuxpackage=$2
  local l_macospackage=$3
  os=`uname`
  color_msg $green "checking that $l_prog  is installed on os $os ..."
  which $l_prog
  if [ $? -eq 1 ]
  then
    case $os in
      # Mac OS
      Darwin)
        which port >/dev/null
        if [ $? -eq 0 ]
        then
          color_msg $blue "installing $l_prog from MacPorts package $l_macospackage"
          sudo port install $l_macospackage
        else
          which brew >/dev/null
          if [ $? -eq 0 ]
          then
            color_msg $blue "installing $l_prog from Homebrew package $l_macospackage"
            sudo brew install $l_macospackage
          else
            error "python3 and pip3 are needed and neither Homebrew nor MacPorts are available for installation. \nYou might want to install the prerequisites yourself"
          fi
        fi
      ;;
      # e.g. Ubuntu/Fedora/Debian/Suse
      Linux)
        color_msg $blue "installing $l_prog from apt-package $l_linuxpackage"
        sudo apt-get install $l_linuxpackage
      ;;
      # git bash (Windows)
      MINGW32_NT-6.1)
        error "$l_prog ist not installed"
      ;;
      *)
        error "unknown operating system $os"
    esac
  fi
}

# check given part to have been downloaded
# param 1: targetdir  (create if not existing)
# param 2: url
# param 3: part
checkPart() {
  local l_targetdir="$1"
  local l_url="$2"
  local l_part="$3"
  local l_target="$l_targetdir/$l_part"
  if [ ! -f "$l_target" ]
  then
    local l_partdir=$(dirname $l_target)
    if [ ! -d "$l_partdir" ]
    then
      mkdir -p "$l_partdir"
    fi
    color_msg $blue "downloading $l_part from $l_url"
    curl $l_url -s -o "$l_target"
  else
    color_msg  $green "$l_part already downloaded"
  fi
}

# check parts specified in here document
checkParts() {
  read l_target
  read l_title
  read l_home
  read l_url
  if [ ! -d "$l_target" ]
  then
    mkdir -p $l_target
    color_msg $blue "downloading $l_title (see $l_home) from $l_url"
    while read part
    do
      checkPart "$l_target" "$l_url" $part
    done
  else
    color_msg $green "$l_title already downloaded"
  fi
}

# get Material Design Icons from github
materialDesignIcons() {
  local l_target="$1"
  cat << EOF | checkParts "$l_target"
    $l_target
    Material Design Icons
    https://material.io/resources/icons
    https://raw.githubusercontent.com/Templarian/MaterialDesign-Webfont/master/
    css/materialdesignicons.css
    css/materialdesignicons.min.css
    css/materialdesignicons.css.map
    css/materialdesignicons.min.css.map
    fonts/materialdesignicons-webfont.woff2
    fonts/materialdesignicons-webfont.svg
    fonts/materialdesignicons-webfont.eot
    fonts/materialdesignicons-webfont.woff
    fonts/materialdesignicons-webfont.ttf
EOF
}

# get CheckBoard.js
chessBoardJs() {
  local l_target="$1"
  cat << EOF | checkParts "$l_target"
    $l_target
    chessboard.js
    https://chessboardjs.com
    https://chessboardjs.com
    js/jquery-3.4.1.min.js
    js/chessboard-1.0.0.min.js
    js/chessboard-1.0.0.js
    css/chessboard-1.0.0.css
    css/chessboard-1.0.0.min.css
EOF
}

# get Bootstrap
bootstrap() {
  local l_target="$1"
  cat << EOF | checkParts "$l_target"
  $l_target
  Bootstrap
  https://getbootstrap.com
  https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css
css/bootstrap.min.css
css/bootstrap-reboot.min.css.map
css/bootstrap.css
css/bootstrap-grid.css.map
css/bootstrap-grid.min.css
css/bootstrap.css.map
css/bootstrap.min.css.map
css/bootstrap-reboot.min.css
css/bootstrap-reboot.css
css/bootstrap-grid.css
css/bootstrap-grid.min.css.map
css/bootstrap-reboot.css.map
js/bootstrap.bundle.js
js/bootstrap.bundle.min.js.map
js/bootstrap.bundle.js.map
js/bootstrap.js
js/bootstrap.bundle.min.js
js/bootstrap.min.js
js/bootstrap.js.map
js/bootstrap.min.js.map
EOF
}

# install required python modules
pythonModules() {
  cd $scriptdir/../src
  pip=pip3
  if [ "$USER" = "travis" ]
  then
    pip=pip
  else
    autoinstall python3 python3.7 python37
    autoinstall pip3 python3-pip python37-pip
  fi
  sudo -H $pip install -r requirements.txt
}


scriptdir=$(dirname $0)

# get bootstrap
bootstrap "$scriptdir/../web/bootstrap"
# get Material Design Icons from github
#materialDesignIcons "$scriptdir/../web/mdi"
# get CheckBoard.js
#chessBoardJs "$scriptdir/../web/chessboard"
# install required python modules
#pythonModules
